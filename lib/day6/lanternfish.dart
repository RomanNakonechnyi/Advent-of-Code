import 'dart:collection';

const int new_fish_days = 8;
const int old_fish_days = 6;

void main(List<String> args) {
  List<LanternFish> fish =
      input.map((e) => LanternFish(remainingDays: e)).toList();

  runAdvancedSimulation(fish);
}

void runAdvancedSimulation(List<LanternFish> fish) {
  var mapOfFish = List.generate(9, (idx) => 0);
  for (var i = 0; i <= 8; i++) {
    mapOfFish[i] = fish.where((element) => element.remainingDays == i).length;
  }

  for (var i = 0; i < 256; i++) {
    final zeroGeneration = mapOfFish[0];
    for (var i = 1; i <= 8; i++) {
      mapOfFish[i - 1] = mapOfFish[i];
    }

    mapOfFish[8] = zeroGeneration;
    mapOfFish[6] += zeroGeneration;
  }

  print(
      'Count of fish on ${80} day : ${mapOfFish.fold(0, (previousValue, element) => (previousValue as int) + element)}');
}

void runSimpleSimulation(List<LanternFish> fish) {
  for (var i = 0; i < 80; i++) {
    List<LanternFish> newFish = [];
    fish.forEach((element) {
      if (element.produceNewFish()) {
        newFish.add(LanternFish());
      }
    });

    fish.addAll(newFish);
  }

  print('Count of fish on ${80} day : ${fish.length}');
}

class LanternFish {
  int _remainingDays;

  int get remainingDays => _remainingDays;
  LanternFish({remainingDays = new_fish_days}) : _remainingDays = remainingDays;

  bool produceNewFish() {
    if (_remainingDays > 0) {
      _remainingDays--;
      return false;
    }
    _remainingDays = old_fish_days;
    return true;
  }
}

final testInput = [3, 4, 3, 1, 2];

final input = [
  4,
  3,
  3,
  5,
  4,
  1,
  2,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  2,
  4,
  1,
  3,
  3,
  1,
  1,
  1,
  1,
  2,
  3,
  1,
  1,
  1,
  4,
  1,
  1,
  2,
  1,
  2,
  2,
  1,
  1,
  1,
  1,
  1,
  5,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  1,
  4,
  2,
  1,
  1,
  2,
  1,
  3,
  1,
  1,
  2,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  1,
  3,
  2,
  2,
  3,
  1,
  1,
  1,
  4,
  1,
  1,
  1,
  1,
  5,
  1,
  1,
  1,
  5,
  1,
  1,
  3,
  1,
  1,
  2,
  4,
  1,
  1,
  3,
  2,
  4,
  1,
  1,
  1,
  1,
  1,
  5,
  5,
  1,
  1,
  1,
  1,
  1,
  1,
  4,
  1,
  1,
  1,
  3,
  2,
  1,
  1,
  5,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  5,
  4,
  1,
  5,
  1,
  3,
  4,
  1,
  1,
  1,
  1,
  2,
  1,
  2,
  1,
  1,
  1,
  2,
  2,
  1,
  2,
  3,
  5,
  1,
  1,
  1,
  1,
  3,
  5,
  1,
  1,
  1,
  2,
  1,
  1,
  4,
  1,
  1,
  5,
  1,
  4,
  1,
  2,
  1,
  3,
  1,
  5,
  1,
  4,
  3,
  1,
  3,
  2,
  1,
  1,
  1,
  2,
  2,
  1,
  1,
  1,
  1,
  4,
  5,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  3,
  4,
  1,
  1,
  4,
  1,
  1,
  3,
  1,
  3,
  1,
  1,
  4,
  5,
  4,
  3,
  2,
  5,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  1,
  5,
  2,
  5,
  3,
  1,
  1,
  1,
  1,
  1,
  3,
  1,
  1,
  1,
  1,
  5,
  1,
  2,
  1,
  2,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  3,
  1,
  1,
  5,
  1,
  3,
  5,
  5,
  1,
  1,
  1,
  2,
  1,
  2,
  1,
  5,
  1,
  1,
  1,
  1,
  2,
  1,
  1,
  1,
  2,
  1
];
